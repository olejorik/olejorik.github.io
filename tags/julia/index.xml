<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Julia | Oleg Soloviev</title>
    <link>https://olejorik.github.io/tags/julia/</link>
      <atom:link href="https://olejorik.github.io/tags/julia/index.xml" rel="self" type="application/rss+xml" />
    <description>Julia</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>en-us</language><copyright>¬© Oleg Soloviev 2018-2022</copyright><lastBuildDate>Sun, 01 Nov 2020 13:58:59 +0100</lastBuildDate>
    <image>
      <url>https://olejorik.github.io/images/icon_hu26380a8a42e981dc8df94547c8583a1c_243550_512x512_fill_lanczos_center_2.png</url>
      <title>Julia</title>
      <link>https://olejorik.github.io/tags/julia/</link>
    </image>
    
    <item>
      <title>Zernike Calculations in Julia</title>
      <link>https://olejorik.github.io/post/zernikecalculations/</link>
      <pubDate>Sun, 01 Nov 2020 13:58:59 +0100</pubDate>
      <guid>https://olejorik.github.io/post/zernikecalculations/</guid>
      <description>







  
  


&lt;div class=&#34;gallery&#34;&gt;

  
  
  
  
    
    
    
    
    
      
    
  &lt;a data-fancybox=&#34;gallery-Zernike&#34; href=&#34;https://olejorik.github.io/post/zernikecalculations/Zernike/Zenike66.png&#34; &gt;
  &lt;img data-src=&#34;https://olejorik.github.io/post/zernikecalculations/Zernike/Zenike66_hu3fe1497f3dd4946ad613be645e724abd_763998_0x190_resize_lanczos_2.png&#34; class=&#34;lazyload&#34; alt=&#34;&#34; width=&#34;89&#34; height=&#34;190&#34;&gt;
  &lt;/a&gt;
  
    
    
    
    
    
      
    
  &lt;a data-fancybox=&#34;gallery-Zernike&#34; href=&#34;https://olejorik.github.io/post/zernikecalculations/Zernike/ZenikeCcc66.png&#34; &gt;
  &lt;img data-src=&#34;https://olejorik.github.io/post/zernikecalculations/Zernike/ZenikeCcc66_hu4e8f541489b963a17c99c90659987393_1453049_0x190_resize_lanczos_2.png&#34; class=&#34;lazyload&#34; alt=&#34;&#34; width=&#34;89&#34; height=&#34;190&#34;&gt;
  &lt;/a&gt;
  
    
    
    
    
    
      
        
      
    
  &lt;a data-fancybox=&#34;gallery-Zernike&#34; href=&#34;https://olejorik.github.io/post/zernikecalculations/Zernike/zx_66.png&#34; data-caption=&#34;x-derivative of the first 66 Zernike polynomials&#34;&gt;
  &lt;img data-src=&#34;https://olejorik.github.io/post/zernikecalculations/Zernike/zx_66_hu8a4212f563f5a20675dba754535cb1b7_642123_0x190_resize_lanczos_2.png&#34; class=&#34;lazyload&#34; alt=&#34;&#34; width=&#34;89&#34; height=&#34;190&#34;&gt;
  &lt;/a&gt;
  
    
    
    
    
    
      
        
      
    
  &lt;a data-fancybox=&#34;gallery-Zernike&#34; href=&#34;https://olejorik.github.io/post/zernikecalculations/Zernike/zy_66_Set1_6.png&#34; data-caption=&#34;y-derivative of the first 66 Zernike polynomials&#34;&gt;
  &lt;img data-src=&#34;https://olejorik.github.io/post/zernikecalculations/Zernike/zy_66_Set1_6_huc18919f13473b142b4f078e9671f9be9_1270963_0x190_resize_lanczos_2.png&#34; class=&#34;lazyload&#34; alt=&#34;&#34; width=&#34;89&#34; height=&#34;190&#34;&gt;
  &lt;/a&gt;
  

  
&lt;/div&gt;
&lt;p&gt;In optics, Zernike polynomials play a big role, and in many computer simulations of optical problems, it&amp;rsquo;s very important to be able to calculate their values on a polar or Cartesian grid. While this problem seems trivial (the exact formulae for Zernike polynomials are known) and is often used as MSc student assignment, it might become challenging for higher degrees of the polynomials due to their fast oscillating nature.&lt;/p&gt;
&lt;p&gt;Recently, a fast and robust method of calculation of the Zernike polynomials and their derivatives in Cartesian coordinates was published 
&lt;a href=&#34;#1&#34;&gt;[1]&lt;/a&gt;. I decided to give it a try and to program it in Julia, as the existing Julia&amp;rsquo;s implementations were not so far from the MSc student&amp;rsquo;s homework versions and are quite slow.&lt;/p&gt;
&lt;p&gt;It was indeed really easy to translate the published pseudo-code in Julia. The implementation appeared to be indeed very fast, so I could not resist to play with some visualisations.&lt;/p&gt;





  
  











&lt;figure id=&#34;figure-z_50xy&#34;&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;https://olejorik.github.io/post/zernikecalculations/z50_tab20_hua8df025c5b14ab8462bb7e3b72ef2e7d_147604_2000x2000_fit_lanczos_2.png&#34; data-caption=&#34;$Z_{50}(x,y)$&#34;&gt;


  &lt;img data-src=&#34;https://olejorik.github.io/post/zernikecalculations/z50_tab20_hua8df025c5b14ab8462bb7e3b72ef2e7d_147604_2000x2000_fit_lanczos_2.png&#34; class=&#34;lazyload&#34; alt=&#34;&#34; width=&#34;600&#34; height=&#34;400&#34;&gt;
&lt;/a&gt;


  
  
  &lt;figcaption&gt;
    $Z_{50}(x,y)$
  &lt;/figcaption&gt;


&lt;/figure&gt;

&lt;p&gt;If you have Julia and Pluto installed, you can test the Zernike generation on your computer by downloading 
&lt;a href=&#34;https://gist.github.com/olejorik/211e9a8763dc8e4508ba6f13dd939aca&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;this Pluto notebook.&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Alternatively, if you just want to play with the visualisations,
you can use online Julia installation (warning: it will take some minutes to initialise, but then it runs quickly).
For this, go to this page: &lt;a href=&#34;http://pluto-on-binder.glitch.me/&#34;&gt;http://pluto-on-binder.glitch.me/&lt;/a&gt; and enter this link in the input box &lt;a href=&#34;https://gist.github.com/olejorik/211e9a8763dc8e4508ba6f13dd939aca&#34;&gt;https://gist.github.com/olejorik/211e9a8763dc8e4508ba6f13dd939aca&lt;/a&gt;.
The page will generate link to a virtual machine running my notebook with interactive Zernike calculations.
You can change the notebooks inputs (use Shift+Enter to update the cells).&lt;/p&gt;
&lt;p&gt;&lt;a name=&#34;1&#34;&gt;&lt;/a&gt;
[1] T. B. Andersen, ‚ÄúEfficient and robust recurrence relations for the Zernike circle polynomials and their derivatives in Cartesian coordinates,‚Äù Opt. Express, vol. 26, no. 15, p. 18878, Jul. 2018&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Running Julia in WSL</title>
      <link>https://olejorik.github.io/post/juliawsl/</link>
      <pubDate>Mon, 05 Oct 2020 21:12:19 +0200</pubDate>
      <guid>https://olejorik.github.io/post/juliawsl/</guid>
      <description>&lt;p&gt;From its first days, Windows 10 provided a full-featured Linux (sub)system, called WSL. To get access to it and use it, one needed just to activate the developer mode and voil√† &amp;mdash; you typed &lt;code&gt;bash&lt;/code&gt; and got Ubuntu 2016 (in terminal only). I tried it, installed python via conda, watched how the free space on my fast but small system drive (SSD) quickly disappeared and forgot it.&lt;/p&gt;
&lt;p&gt;Recently, I&amp;rsquo;ve seen on Internet some news about WSL2, the second version of this Linux subsystem. Publications praised the diversity of the distributives (you are not limited to Ubuntu anymore), a closer integration with Windows (you can call Windows programs from Linux, and the filesystems of Windows and Linux can be accessed bidirectionally), and I also saw some manuals how to install WSL on another drive. Finally I&amp;rsquo;ve got some time to try it, and it worked even better than I expected! Namely, the benefit I&amp;rsquo;ve got is a faster version of Julia on my computer (not to mention enjoying 24K colours in REPL and normal work of all commands in the shell mode üòâ).&lt;/p&gt;
&lt;p&gt;Here are the results from a simple benchmarking of convolving a 512 x 512 image with a 48 x 48 blur kernel. (In our 
&lt;a href=&#34;https://olejorik.github.io/project/madein4&#34;&gt;MADEin4&lt;/a&gt; project, we need to simulate a position-dependent blur, so the convolution speed is a very important parameter for us).&lt;/p&gt;
&lt;p&gt;The screenshots below show (left to right) the speed of this convolution (two different algorithms) calculated by Julia running in WSL and Julia running in Windows, both versions 1.5.2 (and the same convolution made in &lt;em&gt;Mathematica 12.1&lt;/em&gt; for comparison purposes). You can see that the faster version of the algorithm (the second benchmark test) in WSL is almost twice faster as in its Windows version and is approximately as fast as &lt;em&gt;Mathematica&lt;/em&gt; implementation.&lt;/p&gt;
&lt;!-- ![Convolution speed in JuliaWSL, JuliaWindows, and in Mathematica](convolutions_speed.png) --&gt;





  
  











&lt;figure id=&#34;figure-convolution-speed-in-juliawsl-juliawindows-and-in-mathematica&#34;&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;https://olejorik.github.io/post/juliawsl/convolutions_speed_hu46d83dbd953546cbf5e5132c7f05ab5b_793815_2000x2000_fit_lanczos_2.png&#34; data-caption=&#34;Convolution speed in JuliaWSL, JuliaWindows, and in Mathematica&#34;&gt;


  &lt;img data-src=&#34;https://olejorik.github.io/post/juliawsl/convolutions_speed_hu46d83dbd953546cbf5e5132c7f05ab5b_793815_2000x2000_fit_lanczos_2.png&#34; class=&#34;lazyload&#34; alt=&#34;&#34; width=&#34;1989&#34; height=&#34;970&#34;&gt;
&lt;/a&gt;


  
  
  &lt;figcaption&gt;
    Convolution speed in JuliaWSL, JuliaWindows, and in Mathematica
  &lt;/figcaption&gt;


&lt;/figure&gt;

&lt;h2 id=&#34;how-to-install-wsl2-where-you-want-it&#34;&gt;How to install WSL2 where you want it&lt;/h2&gt;
&lt;p&gt;Here are the successive steps that I did, following the nice instructions of 
&lt;a href=&#34;https://damsteen.nl/blog/2018/08/29/installing-wsl-manually-on-non-system-drive&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;this&lt;/a&gt; tutorial. Everything can be done directly in PowerShell, or, if you are not familiar with it, in a more Windows manner using your mouse.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Press Windows key and type &amp;ldquo;Optional Features&amp;rdquo;, press enter to open the following settings page and select there &amp;ldquo;More Windows features&amp;rdquo;:
&lt;img src=&#34;Enable.png&#34; alt=&#34;Enabling WSL&#34;&gt;
or just open PowerShell and enable the WSL2 by executing:&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;Enable-WindowsOptionalFeature -Online -FeatureName Microsoft-Windows-Subsystem-Linux
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I needed to do it despite that I had already  the WSL enabled (WSL1, the &amp;ldquo;Legacy version&amp;rdquo;), and I needed to reboot after this command.&lt;/p&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;If you have not yet created a directory where you want to have your Linux, create it. You can use the following PowerShell command or a less exotic way like right-click in the explorer window and so on:&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;New-Item D:\Linux -ItemType Directory
&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;&lt;code&gt;cd&lt;/code&gt; there. Again, you can use the special PS command (it also can change the drive):&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;Set-Location D:\Linux
&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&#34;4&#34;&gt;
&lt;li&gt;Now you need to download the desired Linux distro and place it in this directory. Go to 
&lt;a href=&#34;https://docs.microsoft.com/en-us/windows/wsl/install-manual#downloading-distros&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;this&lt;/a&gt; page, choose what you want, right-click and save it or again you can use the PowerShell: copy the link address and substitute it in the command below.&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;Invoke-WebRequest -Uri https://aka.ms/wslubuntu2004 -OutFile Ubuntu.appx -UseBasicParsing
&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&#34;5&#34;&gt;
&lt;li&gt;Rename the downloaded &amp;ldquo;.appx&amp;rdquo; file in &amp;ldquo;.zip&amp;rdquo; file and extract it (here shown on example of Debian distro)
&lt;img src=&#34;Extract.png&#34; alt=&#34;Extract the renamed archive&#34;&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;or&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;Rename-Item .\Ubuntu.appx Ubuntu.zip
Expand-Archive .\Ubuntu.zip -Verbose
&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&#34;6&#34;&gt;
&lt;li&gt;Congratulations! You&amp;rsquo;ve almost done. Now you can change to the extracted directory and double click the &amp;ldquo;&lt;em&gt;linux_distro&lt;/em&gt;.exe&amp;rdquo; file
&lt;img src=&#34;Execute.png&#34; alt=&#34;Run to finish the installation&#34;&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;or execute in the PowerShell&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;.\Ubuntu\ubuntu2004.exe
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Input you username and password (remember them well or save them immediately in your password manager, like KeePass), and after some time the installation will be finished.&lt;/p&gt;
&lt;p&gt;You can use your WSL2 now!&lt;/p&gt;
&lt;p&gt;7.(OPTIONAL) Because I had still traces of the old WSL system (although I have uninstalled it), I needed to issue the following command to make my new WSL2 act as default Linux subsystem (&lt;em&gt;e.g.&lt;/em&gt; I can invoke it by typing &lt;code&gt;bash&lt;/code&gt; in terminal):&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;wsl --set-default-version 2
wslconfig /s Ubuntu-20.04
&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    You can also launch it by executing &lt;code&gt;wsl&lt;/code&gt; or &lt;code&gt;ubuntu&lt;/code&gt; commands
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Also I recommend to instal the new 
&lt;a href=&#34;https://aka.ms/terminal&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Windows Terminal&lt;/a&gt;, where you will have immediately easy access to all you Linuxes :-)&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;WindowsTerminal.png&#34; alt=&#34;Using Windows Terminal and WSL2&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;how-to-install-official-release-of-julia-in-your-wsl&#34;&gt;How to install &amp;ldquo;official&amp;rdquo; release of Julia in your WSL&lt;/h2&gt;
&lt;p&gt;To install Julia in your WSL, you can use the packages provided by the distro, but chances are high you&amp;rsquo;ve got some old version. Instead, install the latest stable release from jullialang.org.&lt;/p&gt;
&lt;p&gt;Basically, you need to follow the 
&lt;a href=&#34;https://julialang.org/downloads/platform/#linux_and_freebsd&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;instructions from their webpage&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;For more detailed instruction, 
&lt;a href=&#34;https://ferrolho.github.io/blog/2019-01-26/how-to-install-julia-on-ubuntu&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;follow this tutorial.&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;To summarize, it&amp;rsquo;s as easy as downloading, unpacking, copying to &lt;code&gt;/opt&lt;/code&gt; directory, and making a link:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ wget https://julialang-s3.julialang.org/bin/linux/x64/1.5/julia-1.5.2-linux-x86_64.tar.gz

$ tar -xvzf julia-1.5.2-linux-x86_64.tar.gz

$ sudo cp -r julia-1.5.2 /opt/

$ sudo ln -s /opt/julia-1.5.2/bin/julia /usr/local/bin/julia
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now you can try to type &lt;code&gt;julia&lt;/code&gt; and see it working!&lt;/p&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; in Debian installation, I was not able to use &lt;code&gt;wget&lt;/code&gt; command shown above; the system complained about not valid security certificates of julialang.org. The problem was solved by installing CA-certificates:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ sudo apt-get install ca-certificates
&lt;/code&gt;&lt;/pre&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;alert alert-info&#34;&gt;
  &lt;div&gt;
    My Ubuntu 20.04 installation appeared to be extremely slow in installing julia packages (&amp;ldquo;updating registry&amp;rdquo;); julia itself was running fast.
Debian installation does not have such problem and is now my default WSL.
  &lt;/div&gt;
&lt;/div&gt;
&lt;h2 id=&#34;how-to-use-your-installation-in-vs-code-or-jupyter-lab&#34;&gt;How to use your installation in VS code or Jupyter lab&lt;/h2&gt;
&lt;h2 id=&#34;vs-code&#34;&gt;VS Code&lt;/h2&gt;
&lt;p&gt;To connect VS Code to WSL, I followed its 
&lt;a href=&#34;https://code.visualstudio.com/docs/remote/wsl&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;manual page&lt;/a&gt;.
As I&amp;rsquo;ve had VS Code already installed, I needed to add &lt;code&gt;%USERPROFILE%\AppData\Local\Programs\Microsoft VS Code\bin&lt;/code&gt; to my path manually.&lt;/p&gt;
&lt;p&gt;Then I navigated to my Windows folder with Julia projects (thus &lt;em&gt;not in WSL filesystem&lt;/em&gt;) and opened it from bash by executing &lt;code&gt;code .&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;In addition, I installed in this version of VS Code the julia extension (see 
&lt;a href=&#34;https://techytok.com/julia-vscode/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;here&lt;/a&gt; for more detailed instructions).&lt;/p&gt;
&lt;h3 id=&#34;jupyter-lab&#34;&gt;Jupyter lab&lt;/h3&gt;
&lt;p&gt;You can install in your distro conda, Python and Jupyter as usual, and set julia to use them, but in this case, I decided to keep everything within the julia installation.&lt;/p&gt;
&lt;p&gt;First as usual, &lt;code&gt;] add IJulia&lt;/code&gt; and launch Jupyter lab from within julia:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-julia&#34;&gt;julia&amp;gt; using IJulia

julia&amp;gt; IJulia.jupyterlab()
install Jupyter via Conda, y/n? [y]: y
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Give julia some time to install everything necessary and wait until  the activity in the terminal ends with a message beginning like&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;[ Info: running setenv(`/home/oleg/.julia/conda/3/bin/jupyter lab`,[&amp;quot;PATH=/home/oleg/.julia/conda/3/bin: 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Actually, now the jupyter server is installed and running, but if you don&amp;rsquo;t have a browser installed in WSL, you cannot go further. Press Ctrl+C here. Now we are going  to create and edit jupyter config file so any existing Windows browser could be used.&lt;/p&gt;
&lt;p&gt;To create the config file, execute in bash&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ ~/.julia/conda/3/bin/jupyter notebook --generate-config
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The system will display something like&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;Writing default config to: /home/oleg/.jupyter/jupyter_notebook_config.py
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now open this file in VS Code&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ code ~/.jupyter/jupyter_notebook_config.py
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;and find and edit there the default browser setting (line beginning with &lt;code&gt;c.NotebookApp.browser &lt;/code&gt;). I set it to MS Edge, which I don&amp;rsquo;t use usually, so my Jupyter lab activities are kept separately from my usual web browsing:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;c.NotebookApp.browser = u&#39;/mnt/c/Program\ Files\ \(x86\)/Microsoft/Edge/Application/msedge.exe %s&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In addition, disable the redirect file behaviour by changing the line starting with &lt;code&gt;c.NotebookApp.use_redirect_file&lt;/code&gt; to&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;c.NotebookApp.use_redirect_file = False
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now yuo should be able to launch Jupyter lab either from julia&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-julia&#34;&gt;julia&amp;gt; using IJulia
julia&amp;gt; IJulia.jupyerlab()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;or from bash&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ ~/.julia/conda/3/bin/jupyter lab
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Generic Programming in Julia</title>
      <link>https://olejorik.github.io/talk/generic-programming-in-julia/</link>
      <pubDate>Tue, 15 Oct 2019 15:00:00 +0200</pubDate>
      <guid>https://olejorik.github.io/talk/generic-programming-in-julia/</guid>
      <description></description>
    </item>
    
  </channel>
</rss>
